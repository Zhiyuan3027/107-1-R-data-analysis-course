if(matrix_data[i,1] == matrix_data[i,2] && matrix_data[i,2] == matrix_data[i,3])
{
flag <- TRUE
break
}
}
#check row
if(!flag)
{
for(i in 1:3){
if(matrix_data[1,i] == matrix_data[2,i] && matrix_data[2,i] == matrix_data[3,i])
{
flag <- TRUE
break
}
}
}
#check X
if(!flag){
if(matrix_data[1,1] == matrix_data[2,2] && matrix_data[2,2] == matrix_data[3,3])
{
flag <- TRUE
break
}
if(matrix_data[1,3] == matrix_data[2,2] && matrix_data[2,2] == matrix_data[3,1])
{
flag <- TRUE
break
}
}
return flag
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
matrix_data[1,1] == matrix_data[2,2]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
game[1,3]&&game[3,3]
game[1,3] == game[3,3]
game[1,3] == game[3,3] && game[2,3] == game[3,3]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Create a vector called course.students.number, with data: c(1, 30)
course.student.number <- c(1,30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- names(course.student.number)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
course.student.grade
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade > 80
# Create a vector called course.students.number, with data: c(1, 30)
course.student.number <- c(1:30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade > 80
# Check csg.over.mean
csg.over.mean <- mean(csg.over.80)
# Check csg.over.mean
csg.over.80
course.student.grade
# 基本變數資訊
person.name <- c("Jiyuian", "Shawnroom", "Bigmoumou")
person.sex <- c("F", "M", "M")
person.id <- c("jiyuian520", "shawnn520", "moumou123")
person.days <- c(201, 37, 99)
# 使用data.frame()，並以上述4個向量建立person.df
person.df <- data.frame(person.name, person.sex, person.id, person.days)
# 使用str()查看person.df結構
str(person.df)
# 使用summary()查看person.df summary
summary(person.df)
# 印出person.df
person.df
# 印出person.df第一列
person.df[1, ]
# 印出person.df第二列第三欄
person.df[2, 3]
# 查看person.df中person.id欄位(使用$)
person.df$person.id
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_1/practice")
rm(list = ls())
library(rvest)
url <- "https://nexus-stats.com/Prime/Saryn"
res = GET(url)
res
res = read_html(url)
res
res = GET(url)
res_json = content(res)
res = read_html(url)
res = GET(url)
View(res)
url <- " https://nexus-stats.com/min/production.min.js"
res = GET(url)
url <- " https://nexus-stats.com/min/production.min.js"
res = GET(url)
res_json = content(res)
url <- " https://nexus-stats.com/min/production.min.js"
url <- "https://api.warframe.market/v1/items/saryn_prime_set"
res = GET(url)
ewa
res
res_json = content(res)
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
source('~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/course_2/hw_2_example_teacher.R', echo=TRUE)
res = GET(url)
res_json = content(res)
library(httr)
url <- "https://api.warframe.market/v1/items/saryn_prime_set"
res = GET(url)
res_json = content(res)
### function SayHello #####################################################
SayHello <- function (name) {
print(name)
}
SayHello("Pecu") # Output > "Hello, Pecu"
### function GetBmi #######################################################
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55) # return 16.97531
### function CheckBmiLevel ################################################
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg # "Your bmi:  22.5981404958678 , 正常範圍"
### function GetLargest ###################################################
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
setwd("~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/course_2")
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = "  ", header = TRUE, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = "  ", header = TRUE, stringsAsFactors = F)
# Return my.bmi
return (my.bmi)
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = "  ", header = TRUE, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = "  ", header = TRUE, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = " ", header = TRUE, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = " ", header = T, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = T, stringsAsFactors = F)
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = T, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = " ", header = T, stringsAsFactors = F)
source('~/.active-rstudio-document', echo=TRUE)
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = " ", header = T, stringsAsFactors = F)
setwd("~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/course_2")
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = " ", header = T, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ' ', header = T, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ' ', header = T, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
source('~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/course_2/practice_2.R', echo=TRUE)
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
df$Kobe
df&Name
df$Name
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade[Kobe] <- 990
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade['Kobe'] <- 990
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade["Kobe"] <- 990
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade[11] <- 990
# 轉換df欄位的資料型態 # Grade: integer     Age, Height, Weight: numeric
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
# 查看df結構，是否是轉換完畢結果
str(df)
# 使用order()，以df$Grade將df遞減排序
df <- df[order(df$Grade, decreasing = T), ]
# 使用subset()，刪除df$Age欄位(另一種方式df$Age <- NULL)
df <- subset(df, select = c(-Age))
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[Grade] <- "ToeicGrade"
# 使用subset()，篩選出ToeicGrade大於900並且身高大於170的人
# 且欄位只需要Name, ToeicGrade與Height
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
# 不使用subset()，篩選出df中School A的人。
df[df$School == 'A', ]
# 使用subset()，篩選出ToeicGrade大於900並且身高大於170的人
# 且欄位只需要Name, ToeicGrade與Height
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[Grade] <- 'ToeicGrade'
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[Grade] <- "ToeicGrade"
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[4] <- "ToeicGrade"
# 使用subset()，篩選出ToeicGrade大於900並且身高大於170的人
# 且欄位只需要Name, ToeicGrade與Height
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
# 不使用subset()，篩選出df中School A的人。
df[df$School == 'A', ]
### Part III - 資料框整理技巧II #####################################################
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi, df$Height, df$Weight)
# 使用merge()，將df.sport資料與df進行連結後更新至df，並設定all.x = T保留所有資料
# 參考https://joe11051105.gitbooks.io/r_basic/content/arrange_data/merge_and_subsetting.html
df <- merge(df, df.sport, by = 'Name', all.x = T)
View(df)
library(rvest)
library(rvest)
str888 <- "https://www.ptt.cc/bbs/KanColle/index.html"
str889 <- read_html(str888)
str890 <- html_nodes(str889,".title")
str891 <- html_text(str890)
cat(str891)
library(httr)
library(httr)
web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
search <- 'macbook'
web.pchome.2 <- '&page=1&sort=rnk/dc'
library(httr)
web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
search <- 'macbook'
web.pchome.2 <- '&page=1&sort=rnk/dc'
web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
result <- GET(web)
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
library(httr)
web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
search <- 'macbook'
web.pchome.2 <- '&page=1&sort=rnk/dc'
web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
web
result <- GET(web)
# web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
# search <- 'macbook'
# web.pchome.2 <- '&page=1&sort=rnk/dc'
# web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
web <- 'https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=macbook&page=1&sort=rnk/dc'
result <- GET(web)
web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
search <- 'macbook'
web.pchome.2 <- '&page=1&sort=rnk/dc'
web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
search <- 'macbook'
web.pchome.2 <- '&page=1&sort=rnk/dc'
web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
#web <- 'https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=macbook&page=1&sort=rnk/dc'
result <- GET(web)
# web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
# search <- 'macbook'
# web.pchome.2 <- '&page=1&sort=rnk/dc'
# web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
web <- 'https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=macbook&page=1&sort=rnk/dc'
result <- GET(web)
result
result.json
result.json <- content(result)
result.json
do.call(rbind, result.json$prods$price)
do.call(rbind, result.json$prods)
View(data.frame(do.call(rbind, result.json$prods)))
setwd("~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/hw_2/Pchome_crawler")
source('~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/hw_2/Pchome_crawler/Pchome_crawler.R', echo=TRUE)
result.json <- content(result)
raw.data <- do.call(rbind, result.json$prods)
View(raw.data)
library(httr)
# web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
# search <- 'macbook'
# web.pchome.2 <- '&page=1&sort=rnk/dc'
# web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
web <- 'https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=macbook&page=1&sort=rnk/dc'
result <- GET(web)
result.json <- content(result)
raw.data <- do.call(rbind, result.json$prods)
View(raw.data)
library(httr)
# web.pchome.1 <- ' https://ecshweb.pchome.com.tw/search/v3.3/all/results?q='
# search <- 'macbook'
# web.pchome.2 <- '&page=1&sort=rnk/dc'
# web <- paste(web.pchome.1, search, web.pchome.2, sep = "")
web <- 'https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=macbook&page=1&sort=rnk/dc'
result <- GET(web)
result.json <- content(result)
raw.data <- data.frame(do.call(rbind, result.json$prods))
View(raw.data)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
web <- 'https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=macbook&page=1&sort=rnk/dc'
result <- GET(web)
result.json <- content(result)
raw.data <- data.frame(do.call(rbind, result.json$prods))
library(knitr)
kable(raw.data)
setwd("~/大學/107上學期/資料科學與程式設計/107-1-R-data-analysis-course/week_2/hw_2/Teacher_crawler_example")
